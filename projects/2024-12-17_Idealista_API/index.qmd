---
title: "Idealista: case in vendita a Malaga"
author: Erik De Luca
date: "2024-12-17"
categories: [API, Real Estate, R, Idealista, Leaflet]
image: logo_Idealista_API_2.png
draft: false
editor: 
  markdown: 
    wrap: sentence
---

The aim of this project is to download all the ads of houses for sale in Trieste from the Idealista website and conduct a preliminary analysis of the data.
Moreover, we will create a map with the location of the houses for sale, to get an idea of the distribution of the ads and their prices in the city.

## Get the Data

```{r import libraries, warning=FALSE, message=FALSE}
librerie = c(
  "jsonlite",
  "httr", # for the API
  "scales",
  "ggplot2",
  "leaflet", # for the map
  "RColorBrewer", # for the map
  # "reticulate", 
  "tidyverse",
  "plotly",
  "randomForest" # for na.roughfix
)

Install_And_Load <- function(packages) {
  k <- packages[!(packages %in% installed.packages()[,"Package"])];
  if(length(k))
  {install.packages(k, repos='https://cran.rstudio.com/');}

  for(package_name in packages)
  {library(package_name,character.only=TRUE, quietly = TRUE);}
}

# the tidyverse functions are used instead of the others in case of same name for two functions
# conflicted::conflict_prefer_all("tidyverse")
conflicted::conflict_prefer_all("dplyr")
conflicted::conflict_prefer_all("ggplot2")


Install_And_Load(librerie)

```

To access the idealista APIs we need to obtain the credentials.
You can get them by registering on the [idealista website](https://developers.idealista.com/access-request).

```{r connect idealista, eval = FALSE}
# parametri in input

# nuove credenziali

consumer_key = readRDS("keys/consumer_key.rds")
consumer_secret = readRDS("keys/consumer_secret.rds")
# saveRDS(consumer_key, file = "keys/consumer_key.rds")
# saveRDS(consumer_secret, file = "keys/consumer_secret.rds")


#Use basic authentication
secret <- jsonlite::base64_enc(paste(consumer_key, consumer_secret, sep = ":"))
req <- httr::POST("https://api.idealista.com/oauth/token",
                  httr::add_headers(
                    #"Authorization" = paste("Basic", gsub("n", "", secret)),
                    "Authorization" = paste("Basic", secret, sep = " "),
                    "Content-Type" = "application/x-www-form-urlencoded;charset=utf-8"
                  ),
                  body = "grant_type=client_credentials"
)

token <- paste("Bearer", httr::content(req)$access_token)

```

Establish the parameters for the request link.
Our goal is to obtain all ads for houses for sale in Trieste.
The central point is set to the center of Trieste, with a maximum distance of 10 km.
We also require a minimum size of 30 square meters for the ads Establish the parameters for the request link.
Our goal is to obtain all ads for houses for sale in Trieste.
The central point is set to the center of Trieste, with a maximum distance of 10 km.
We also require a minimum size of 30 square meters for the ads to exclude garages.to exclude garages.

```{r}
#url user parameters
# x = '36.71145256718129' For Malaga
# y = '-4.4288958904720355'
x = '45.643170'
y = '13.790524'
maxItems = '10000'
distance = '10000'
type = 'homes'
op = 'sale'
minprice = '30001'
maxprice = '200000000'
minsize = '30'
maxsize = '10000'


#url fixed parameters
# site = 'https://api.idealista.com/3.5/es/search?' For Spain
site = 'https://api.idealista.com/3.5/it/search?'
loc = 'center='
# country = '&country=es'
country = '&country=it'
maxitems = '&maxItems=50'
pages = '&numPage='
dist = '&distance='
property = '&propertyType='
operation = '&operation='
pricefrom = '&minPrice='
priceto = '&maxPrice='
misize = '&minSize='
masize = '&maxSize='
chalet = '&chalet=0'

```

Now, we will send the request to Idealista.
We have a monthly limit of 100(`pagina = 100`) for requests and one for second (`Sys.sleep(1)`).
Each request is different only by the result page's index.

Once the data are downloaded and extracted from JSON, we'll get the lists that have to extract and put in a dataset.
The problem araises becuase inside the lists are present other lists nested and not for each ad but only for someone.
So that we create an empty matrix with the unique items number for ads as columns and the number of rows equal to the number of ads.

```{r, eval = FALSE}
pagina = 100

for(z in 16:pagina)
{
  print(z)
  
  # prepara l'url
  url <- paste0(site, loc, x, ',', y, country, maxitems, pages, z, dist, distance,
               property, type, operation, op, pricefrom, minprice, priceto, maxprice,
               misize, minsize, masize, maxsize)
  
  # invia la richiesta a idealista
  res <- httr::POST(url, httr::add_headers("Authorization" = token))
  
  # estrai il contenuto dal JSON 
  cont_raw <- httr::content(res) 
  
  # stop the cycle if there are no more results
  if(length(cont_raw[[1]]) == 0) break

    # NUOVO: Prendo i nomi delle colonne da tutte le liste e li unisco
  colNames = unique(unlist(sapply(1:length(cont_raw[[1]]), function(x) cont_raw[[1]][[x]] %>% names()))) %>% sort()
  
  # Creo una matrice vuota dove imagazzinare i valori
  m = matrix(NA, nrow = length(cont_raw[[1]]), ncol = length(colNames))
  colnames(m) = colNames
  for(r in 1:length(cont_raw[[1]]))
  {
    for(c in 1:length(cont_raw[[1]][[r]]))
    {
      # nel caso l'elemento della lista sia una sotto lista o df vado a spacchettarlo aggiungendo colonne
      if(length(cont_raw[[1]][[r]][[c]])>1)
      {
        # non si può fare in un unico caso
        for(i in 1:length(cont_raw[[1]][[r]][[c]]))
        {
          # se la colonna della sottolista non è già stata aggiunta lo faccio
          if(is.null(names(cont_raw[[1]][[r]][[c]])))
          {
            cont_raw[[1]][[r]][[c]] = cont_raw[[1]][[r]][[c]][[1]] 
          }
          if(!names(cont_raw[[1]][[r]][[c]])[i] %in% colNames)
          {
            colNames = c(colNames, names(cont_raw[[1]][[r]][[c]])[i])
            m = cbind(m, rep(NA,length(cont_raw[[1]]))) # aggiunta della colonna
            colnames(m) = colNames
          }
        }
        # inserisco i dati della sottolista
        for(k in 1:length(cont_raw[[1]][[r]][[c]]))
          m[r,names(cont_raw[[1]][[r]][[c]])[k]] = cont_raw[[1]][[r]][[c]][[k]]
      }else{
        tryCatch(
          {
            m[r,names(cont_raw[[1]][[r]][c])] = ifelse(length(cont_raw[[1]][[r]][[c]][[1]])>1,
                                                       cont_raw[[1]][[r]][[c]][[1]][[1]],
                                                       cont_raw[[1]][[r]][[c]][[1]])
          },
          error = function(e) print(paste(z, r, c, e)))
      }
    }
  }
  d = m %>% data.frame() %>% tibble()
  
  # debug
  print(c(data %>% dim))
  
  # merge database
  if(z == 1)
  {
    data = d
  }else
  {
    data[setdiff(names(d), names(data))] <- NA
    d[setdiff(names(d), names(data))] <- NA
    data = bind_rows(data, d)
  }
  
  Sys.sleep(1.1)
  
}

saveRDS(data, "data/data_TS_24_12")
```

In order to avoid making further requests to the site, previously collected data are retrieved and the previous code is not executed.

```{r import data}
data = readRDS(file = "data/data_TS_24_12")
data |> 
  # reorder columns
  select(
    propertyType,
    district,
    price,
    priceByArea,
    size,
    rooms,
    bathrooms,
    floor,
    priceInfo,
    newDevelopment,
    parkingSpace,
    parkingSpacePrice,
    province,
    municipality,
    country,
    operation,
    latitude,
    longitude,
    status,
    detailedType,
    numPhotos
  ) 
```

## Clean Data

Easy and fast cleaning.

```{r clean data}
# data.frame(1:dim(data)[2],data %>% names)
# str(data)
# pulizia dei dati
data$floor[data$floor == "bj"] = 0

# indexNumeric = c(1,4,5,6,9,11,12,18,19,20,23,29,30,43)

data %>% 
  mutate_at(
    vars(
    price,
    priceByArea,
    parkingSpacePrice,
    floor,
    priceInfo,
    size,
    rooms,
    bathrooms,
    numPhotos,
    parkingSpace,
    latitude,
    longitude,
  ),
  as.numeric
  ) |> 
  mutate_at(
    vars(
      propertyType,
      operation,
      province,
      municipality,
      district,
      country,
      status,
      newDevelopment,
      detailedType,
      highlight,
      typology,
      subTypology,
    ),
    as.factor
  ) |> 
  mutate_at(
    vars(
      hasLift,
      hasPlan,
      has3DTour,
      has360,
      hasStaging,
      hasVideo,
      showAddress,
      newDevelopmentFinished,
      topNewDevelopment,
      topPlus,
      hasParkingSpace,
      isParkingSpaceIncludedInPrice,
      
    ),
    as.logical,
  ) |> 
  mutate(
    across(district, \(x) str_replace_all(x, "-", " - ")),
    city_area = if_else(is.na(neighborhood), district, neighborhood),
    label = paste0(
      "Title: ", title, "\n",
      "District: ", city_area, "\n",
      "Floor: ", floor, "\n",
      "Size: ", size, " m^2\n",
      "Price: ", dollar(price, prefix = "€", suffix = "k", scale = .001), "\n",
      "Price for m^2: ", dollar(priceByArea, prefix = "€"), "\n",
      "Property type: ", propertyType, "\n",
      "Rooms: ", rooms, "\n",
      "Bathrooms: ", bathrooms, "\n",
      "Status: ", status, "\n"
    ),
  ) -> data
```

## Exploratory data analysis

### Plots

```{r grid plot}
data |> 
  filter(!is.na(floor)) |>
  mutate(
    across(city_area, \(x) fct_na_value_to_level(x, "NA") |> fct_lump_n(5))
  ) |> 
  summarise(
    n = n(),
    across(price, mean),
    .by = c(floor, city_area)
  ) |>
  mutate(
    across(c(price, n), list(max = max, min = min), .names =  "{.col}_{.fn}"),
    across(price, \(x) qunif((x - min(x))/(max(x) - min(x)), min(n), max(n))),
    .by = city_area
  ) |> 
ggplot(aes(x = floor, z = price_max)) +
  geom_line(aes(y = n)) +
  geom_col(aes(y = price)) +
  facet_wrap(
    ~city_area,
    ncol = 3,
    scales = "free",
    labeller = label_wrap_gen()
    ) +
  scale_y_continuous(
    name = "Count",
    sec.axis = sec_axis(trans = ~ ., name = "Price")
  ) +
  scale_x_continuous(
    labels = ~number(., accuracy = 1)
  ) +
  labs(
    y = "",
    title = "Distibution of the floor of the houses in the different districts"
  ) +
  theme_minimal()
```

Grafico a barre del prezzo medio delle case in rapporto al piano nella quale si trovano.

```{r interactive plot}
#| fig-height: 10
#| fig-width: 10

p = data |> 
  filter(!is.na(floor), !is.na(size)) |> 
  mutate(
    across(city_area, \(x) fct_na_value_to_level(x, "NA") |> fct_lump_n(8))
  ) |> 
  ggplot(aes(x = size, y = price, color = city_area,
             group = city_area, text = label)) +
  geom_point(
    alpha = .7,
    size = 1,
  ) +
  geom_smooth(
    alpha = .9,
    se = F,
    linewidth = .5,
    linetype = "dashed",
  ) +
  scale_y_log10(
    labels = \(x) dollar(x, prefix = "€", suffix = "k",
                         scale = .001, accuracy = 1)
  ) +
  scale_x_continuous(
    limits = c(15,200),
    ) +
  # scale_x_log10() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
  ) +
  guides(
    color = guide_legend(nrow = 2)
  ) +
  labs(
    x = "Size (m^2)",
    y = "Price",
    title = "Price of the houses in relation to the size",
    color = "District"
  )
ggplotly(p, tooltip = "text") |> 
  plotly::layout(
    legend = list(
      orientation = "h", 
      x = 0.5, 
      xanchor = "center", 
      y = -0.2
    )
  )
```


### Maps

Mappa del prezzo delle case nelle diverse zone della città.
La mappa è interattiva, cliccando sui singoli pallini comparirà una box con ulteriori dati sulla casa.

```{r map}
pal = with(data, colorFactor(brewer.pal(10,"RdYlGn"), -priceByArea))
dfPopup = data %>% 
  mutate(popup_info = str_replace_all(label, "\n", "<br>"))
leaflet() %>% 
  addTiles() %>% 
  addCircleMarkers(data = dfPopup,
                   lat = ~ latitude,
                   lng = ~ longitude,
                   radius = ~ 2,
                   opacity = .7,
                   color = ~ pal(-priceByArea),
                   popup = ~ popup_info)
```

### Correlation plot

```{r correletion plot}
data %>% 
  select_if(is.numeric) %>% 
  dplyr::select(
    price,
    size,
    numPhotos,
    floor,
    rooms,
    bathrooms,
    ) %>% 
  na.roughfix() %>%  
  cor %>% 
  corrplot::corrplot(method = "number",
                     hclust.method = "ward.D2",
                     diag = F,
                     type = "upper",
                     order = "hclust",
                     number.cex = .6)
```




